import os
import streamlit as st
from pathlib import Path
from datetime import datetime
import pandas as pd

# fix pour le probl√®me de protobuf
os.environ["PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION"] = "python"

# fix pour le probl√®me de distutils en python 3.12+
try:
    import distutils
except ImportError:
    import setuptools._distutils as distutils

from src.evaluation import RAGEvaluator, faithfulness

from src.rag_core import RAGSystem, load_pokepedia_documents
from src.format_pokeapi_data import create_pokemon_documents

# config de la page
st.set_page_config(
    page_title="pok√©dex ia - syst√®me de questions-r√©ponses",
    page_icon="‚ö°",
    layout="wide",
)

# init de l'√©tat
if "engaged_mode" not in st.session_state:
    st.session_state.engaged_mode = True  # mode engag√© activ√© par d√©faut
if "rag_system" not in st.session_state:
    st.session_state.rag_system = RAGSystem(engaged_mode=st.session_state.engaged_mode)
if "evaluator" not in st.session_state:
    st.session_state.evaluator = RAGEvaluator()
if "num_pokemon" not in st.session_state:
    st.session_state.num_pokemon = 0
if "num_pokepedia" not in st.session_state:
    st.session_state.num_pokepedia = 0

# chargement des donn√©es
if "data_embedded" not in st.session_state:
    with st.spinner("chargement des donn√©es..."):
        try:
            # charge les documents pokeapi
            pokemon_documents = create_pokemon_documents()

            # charge les documents pok√©p√©dia s√©par√©ment pour le comptage
            pokepedia_documents = load_pokepedia_documents()

            # compte les documents
            pokeapi_count = len(pokemon_documents)
            pokepedia_count = len(pokepedia_documents)

            # int√®gre les documents
            st.info("int√©gration des documents...")
            st.session_state.rag_system.embed_documents(
                pokemon_documents, pokepedia_documents
            )
            st.session_state.data_embedded = True
            st.session_state.num_pokemon = pokeapi_count
            st.session_state.num_pokepedia = pokepedia_count
            st.success(
                f"int√©gration termin√©e ! {pokeapi_count} documents pokeapi + {pokepedia_count} documents pok√©p√©dia charg√©s."
            )
        except Exception as e:
            st.error(f"erreur de chargement : {e}")
            st.session_state.data_embedded = False

# titre et description
st.title("‚ö° pok√©dex ia - syst√®me de questions-r√©ponses")
st.markdown(
    """
cette application utilise un syst√®me rag (retrieval-augmented generation) pour r√©pondre √† vos questions
sur les pok√©mon. le syst√®me utilise le mod√®le gemini de google pour la g√©n√©ration
et chromadb pour le stockage et la r√©cup√©ration des informations.

les donn√©es proviennent de deux sources principales :
- **pokeapi** : informations d√©taill√©es sur chaque pok√©mon (statistiques, types, capacit√©s, descriptions officielles)
- **pok√©p√©dia** : contenu enrichi en fran√ßais avec descriptions d√©taill√©es, biologie, comportement, habitat, mythologie et faits divers

le syst√®me utilise une recherche vectorielle avanc√©e avec :
- m√©tadonn√©es enrichies incluant les informations d'index (types, statuts, habitats, couleurs)
- int√©gration automatique des donn√©es pok√©p√©dia pour des r√©ponses plus riches et d√©taill√©es
- recherche s√©mantique pour comprendre le contexte et l'intention des questions
"""
)

# barre lat√©rale
with st.sidebar:
    st.header("param√®tres")

    # param√®tres du mod√®le
    st.subheader("param√®tres du mod√®le")
    temperature = st.slider("temp√©rature", 0.0, 1.0, 0.0, 0.1)

    # mettre √† jour la temp√©rature du syst√®me rag
    if hasattr(st.session_state.rag_system, "llm"):
        current_temp = st.session_state.rag_system.llm.temperature
        if abs(temperature - current_temp) > 0.001:  # √©viter les mises √† jour inutiles
            st.session_state.rag_system.update_temperature(temperature)

    # mode engag√©
    st.subheader("mode de r√©ponse")
    engaged_mode = st.toggle(
        "activer le mode engag√©", value=st.session_state.engaged_mode
    )
    if engaged_mode != st.session_state.engaged_mode:
        st.session_state.engaged_mode = engaged_mode
        # mettre √† jour le mode du syst√®me rag existant sans r√©initialiser
        if hasattr(st.session_state.rag_system, "engaged_mode"):
            st.session_state.rag_system.engaged_mode = engaged_mode
            # mettre √† jour le prompt template
            st.session_state.rag_system._update_prompt_template()

    if engaged_mode:
        st.success("‚úÖ mode engag√© activ√© - r√©ponses d√©taill√©es et structur√©es")
    else:
        st.info("‚ÑπÔ∏è mode normal - r√©ponses concises et directes")

    # stats des donn√©es
    st.subheader("statistiques des donn√©es")
    if "data_embedded" in st.session_state and st.session_state.data_embedded:
        st.write(f"nombre de pok√©mon : {st.session_state.num_pokemon}")
        st.write(f"documents pok√©p√©dia : {st.session_state.num_pokepedia}")
        st.write("sources : pokeapi + pok√©p√©dia")
    else:
        st.write("donn√©es non charg√©es")

    # exemples de questions
    st.subheader("exemples de questions")
    st.markdown(
        """
    - liste les pok√©mon l√©gendaires
    - quels sont les pok√©mon mythiques ?
    - d√©cris-moi pikachu
    - quelles sont les stats de base de charizard ?
    - qui a le plus d'attaque entre lapras et rattata ?
    - raconte-moi l'histoire et la mythologie de mewtwo
    - d√©cris le comportement et l'habitat de bulbizarre
    - quels sont les faits int√©ressants sur arcanin ?
    """
    )

# contenu principal
st.header("posez votre question")

# saisie de la question
question = st.text_input("entrez votre question:")

if question:
    # obtention de la r√©ponse
    with st.spinner("g√©n√©ration de la r√©ponse..."):
        try:
            result = st.session_state.rag_system.query(question)

            # affichage de la r√©ponse
            st.info("recherche s√©mantique (vecteurs)")
            st.subheader("r√©ponse")
            st.write(result["answer"])

            # √©valuation de la r√©ponse
            with st.spinner("√©valuation de la r√©ponse..."):
                overlap = faithfulness(result["answer"], result["context"])
                faithfulness_score = overlap

            # indicateurs de confiance
            st.subheader("indicateurs de confiance")

            # colonnes pour les m√©triques
            col1, col2 = st.columns(2)

            # fid√©lit√©
            hallucination_prob = 1 - faithfulness_score
            with col1:
                st.metric(
                    "probabilit√© d'hallucination",
                    f"{hallucination_prob:.1%}",
                    delta=None,
                    delta_color="inverse",
                )

            # recouvrement du contexte
            with col2:
                st.metric("recouvrement du contexte", f"{overlap:.1%}", delta=None)

            # barre de confiance
            confidence_score = faithfulness_score
            st.progress(confidence_score, text="confiance globale")

            # avertissement si hallucination √©lev√©e
            if hallucination_prob > 0.3:
                st.warning("‚ö†Ô∏è attention : r√©ponse potentiellement incorrecte")

            # affichage du contexte
            if result["context"]:
                with st.expander("voir le contexte"):
                    for i, (ctx, metadata) in enumerate(
                        zip(result["context"], result["metadata"]), 1
                    ):
                        source = metadata.get("source", "unknown")
                        source_icon = (
                            "üìä"
                            if source == "pokeapi"
                            else "üìö" if source == "pokepedia" else "‚ùì"
                        )
                        st.markdown(f"**contexte {i}** {source_icon} ({source}):")
                        st.write(ctx)
                        st.markdown("---")
        except ValueError as e:
            st.error(str(e))
            if "r√©initialiser l'application" in str(e).lower():
                st.session_state.data_embedded = False
                st.rerun()
        except Exception as e:
            st.error(f"Erreur : {e}")
            st.session_state.data_embedded = False
            st.rerun()

# section d'√©valuation
st.header("√âvaluation")
with st.expander("Ajouter une r√©f√©rence"):
    reference = st.text_area("Entrez la r√©ponse de r√©f√©rence:")
    if st.button("Sauvegarder la r√©f√©rence"):
        st.session_state.reference_answer = reference
        st.success("R√©f√©rence sauvegard√©e!")

# journal des hallucinations
if "answer" in locals() and "reference_answer" in st.session_state:
    if faithfulness_score < 0.7:  # seuil d'hallucination
        log_path = Path("hallucinations.csv")
        log_df = pd.DataFrame(
            [
                {
                    "timestamp": datetime.now(),
                    "question": question,
                    "prediction": result["answer"],
                    "reference": st.session_state.reference_answer,
                    "faithfulness_score": faithfulness_score,
                    "search_type": "semantic",
                }
            ]
        )

        if log_path.exists():
            log_df.to_csv(log_path, mode="a", header=False, index=False)
        else:
            log_df.to_csv(log_path, index=False)
